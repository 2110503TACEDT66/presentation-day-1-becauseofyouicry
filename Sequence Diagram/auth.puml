@startuml Auth - Authentication Functions

actor "User & Admin" as client

participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:auth" as routerAuth
participant "<<middleware>>\n:auth" as middlewareAuth
participant "<<controllers>>\n:auth" as controllersAuth
participant "<<model>>\n:user" as modeluser
database "<<MongoDB>>\n:users" as UsersDatabase

client -> server ++: register(name, tel, email, password, role)
server -> routerAuth ++: app.use('/api/v1/auth', auth)
routerAuth -> controllersAuth ++: post("/register", register)
controllersAuth -> modeluser ++: User.create(name, telephone, email, password, role)
modeluser -> UsersDatabase ++: create(name, telephone, email, password, role)
modeluser <-- UsersDatabase --: user
controllersAuth <-- modeluser --: user
controllersAuth -> modeluser ++: user.getSignedJwtToken()
controllersAuth <-- modeluser --: token
routerAuth <-- controllersAuth --: token
client <-- routerAuth --: token

client -> server ++: login(email, password)
server -> routerAuth ++: use('/api/v1/auth', auth)
routerAuth -> controllersAuth ++: post("/login", login)
controllersAuth -> modeluser ++: findOne({email}).select("+password")
modeluser -> UsersDatabase ++: findOne({email}).select("+password")
UsersDatabase --> modeluser --: user
controllersAuth <-- modeluser --: user
controllersAuth -> modeluser ++: user.matchPassword(password)
controllersAuth <-- modeluser --: isMatch
controllersAuth -> modeluser ++: user.getSignedJwtToken()
controllersAuth <-- modeluser --: token
routerAuth <-- controllersAuth --: token
client <-- routerAuth --: token

client -> server ++: getMe(token)
server -> routerAuth ++: use('/api/v1/auth', auth)
routerAuth -> middlewareAuth ++: protect()
middlewareAuth -> middlewareAuth ++: decodeToken
middlewareAuth -> modeluser ++: User.findById(decodeToken)
modeluser -> UsersDatabase ++: findById(decodeToken)
modeluser <-- UsersDatabase --: user
middlewareAuth <-- modeluser --: user
routerAuth <-- middlewareAuth --: next
routerAuth -> controllersAuth ++: get("/me", getMe)
controllersAuth -> modeluser ++: findById(userId)
modeluser -> UsersDatabase ++: findById(userId)
modeluser <-- UsersDatabase --: user
controllersAuth <-- modeluser --: user
routerAuth <-- controllersAuth --: user
client <-- routerAuth --: user

client -> server ++: logout(token)
server -> routerAuth ++: use('/api/v1/auth', auth)
routerAuth -> controllersAuth ++: post("/logout", logout)
controllersAuth -> controllersAuth : expireToken(token)
routerAuth <-- controllersAuth --: response
client <-- routerAuth --: response

@enduml
